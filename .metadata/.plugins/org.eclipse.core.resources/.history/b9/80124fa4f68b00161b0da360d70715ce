package Grupo4

import Grupo4.*;
import robocode.*;
import robocode.ScannedRobotEvent;


//para guardar as açoes que serao executadas
query "consulta_acciones"
  accion: Accion()
end


// 
// REGRAS
//


// utilizar para armazenar informaçao de vitima encontrada
declare vitima
   nome: String
   x: double
   y: double
   distancia: double
end


// Regla de conveniencia: elimina acciones del mismo tipo con menor prioridad
// Si no se hiciera el robot ejecutaría la última acción insertada sin atender a su pioridad
rule "apagar acoes do mesmo tipo"
when
  $accion1: Accion($tipo: tipo, $prioridad1: prioridad)
  $accion2: Accion(tipo==$tipo, $prioridad2: prioridad)
  eval ($prioridad1 > $prioridad2)
then
    retract($accion2);     // elimina a acao menos prioritaria
    System.out.println("regla 1");
end

// Se nao encontrou robos, giro todo o radar
rule "sem robos a vista -> girar radar em 90"
when
  not (exists ScannedRobotEvent())
then
  insert (new Accion(Accion.GIRAR_RADAR_DER, 90, 1));
  System.out.println("giro de radar");
end

// // No necesaria ¿?
//rule "sin vitima fijada -> giro completo del radar"
//when
//      not (exists vitima())
//then
//      insert (new Accion(Accion.GIRAR_RADAR_DER, 360, 1));
//      System.out.println("regla 2-bis");
//end

// Cuando esta parado y no hay vitima girar radar 360 y moverse al azar
rule "parado sem vitima -> move-se aleatoriamente (girar+avancar)"
when
  EstadoRobot( distanceRemaining == 0 )
  not (exists vitima())
  $batalla: EstadoBatalla()
then
  insert(new Accion(Accion.GIRAR_RADAR_DER, 360, 1));
  insert(new Accion(Accion.GIRAR_TANQUE_DER, (360*Math.random() - 180), 1));
  insert(new Accion(Accion.GIRAR_CANON_DER, (360*Math.random() - 180), 1));
  double avance = Math.min($batalla.getAnchoCampo(), $batalla.getAltoCampo())*Math.random();
  insert(new Accion(Accion.AVANZAR, avance, 1));
  System.out.println("regra 3");
end


// vitima detectada por radar, 
//atualizar localizacao e ir atras dela apontando o canhao e radar
rule "vitima detectada -> atualizar dados e ir ate ela"
   when
      $datosvitima: vitima ($nomevitima: nome)
      $status : EstadoRobot()
      $vitimaEscaneada: ScannedRobotEvent(name == $nomevitima)
   then
      double anguloAbsoluto = Auxiliar.anguloAbsoluto($status.getHeading(), $vitimaEscaneada.getBearing());
      $datosvitima.setX(Auxiliar.calcularX($status.getX(), anguloAbsoluto, $vitimaEscaneada.getDistance()));                                            
      $datosvitima.setY(Auxiliar.calcularX($status.getY(), anguloAbsoluto, $vitimaEscaneada.getDistance()));
      $datosvitima.setDistancia($vitimaEscaneada.getDistance());
      
      insert(new Accion(Accion.GIRAR_TANQUE_DER, $vitimaEscaneada.getBearing(), 1));
      double anguloRelativoCanon = Auxiliar.anguloRelativo($status.getHeading(), $status.getGunHeading()); // Descontar el desplazam. actual del canon 
      insert(new Accion(Accion.GIRAR_CANON_DER, ($vitimaEscaneada.getBearing() - anguloRelativoCanon), 1));
      double anguloRelativoRadar =  Auxiliar.anguloRelativo($status.getHeading(), $status.getRadarHeading()); // Descontar el desplazam. actual del radar  
      insert(new Accion(Accion.GIRAR_RADAR_DER, ($vitimaEscaneada.getBearing() - anguloRelativoRadar), 1));
      insert(new Accion(Accion.AVANZAR, ($vitimaEscaneada.getDistance()-100), 1));
end



// vitima detectada por radar,
//se esta no ponto de mira (anguloRelativoCañón == anguloRelativovitima)
 //com uma margem de 2 grados, disparar com o maximo disponivel
//  (se activará a lavez que la regla anterior)
rule "vitima em ponto de mira -> disparar"
   when
      $status : EstadoRobot()
      vitima ($nomevitima: nome)
      // vitima detectada y cañon apunta en su angulo (con un margen de 2 grados)
      ScannedRobotEvent(name == $nomevitima, $anguloRelativovitima: bearing)                       
      eval (Math.abs($anguloRelativovitima - Auxiliar.anguloRelativo($status.getHeading(), $status.getGunHeading())) <= 2)   
   then
      insert(new Accion(Accion.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 1));
      System.out.println("vitima "+$nomevitima+" a tiro => disparar");
end



// quando no ha uma vitima assinada e se escaneia um robot,  
//adotar-lo como victima e ir ate ele apontando radar e canhao
rule "sem vitima -> tomar a primeira que aparecer"
when
  not (exists vitima())
  $vitimaEscaneada: ScannedRobotEvent()
  $status: EstadoRobot()
then
    vitima vitima = new vitima();
      double anguloAbsoluto = Auxiliar.anguloAbsoluto($status.getHeading(), $vitimaEscaneada.getBearing());
      vitima.setnome($vitimaEscaneada.getName());
      vitima.setX(Auxiliar.calcularX($status.getX(), anguloAbsoluto, $vitimaEscaneada.getDistance()));                                            
      vitima.setY(Auxiliar.calcularX($status.getY(), anguloAbsoluto, $vitimaEscaneada.getDistance()));
      vitima.setDistancia($vitimaEscaneada.getDistance());
      insert(vitima);
      
      insert(new Accion(Accion.GIRAR_TANQUE_DER, $vitimaEscaneada.getBearing(), 1));
      double anguloRelativoCanon = Auxiliar.anguloRelativo($status.getHeading(), $status.getGunHeading()); // Descontar el desplazam. actual del canon 
      insert(new Accion(Accion.GIRAR_CANON_DER, ($vitimaEscaneada.getBearing() - anguloRelativoCanon), 1));
      double anguloRelativoRadar =  Auxiliar.anguloRelativo($status.getHeading(), $status.getRadarHeading()); // Descontar el desplazam. actual del radar  
      insert(new Accion(Accion.GIRAR_RADAR_DER, ($vitimaEscaneada.getBearing() - anguloRelativoRadar), 1));
      insert(new Accion(Accion.AVANZAR, ($vitimaEscaneada.getDistance()-100), 1));    
      System.out.println("regra 6"); 
end

// Eliminar a vitima() atual uma vez morta
rule "morte da vitima"
when
   $vitima: vitima ($nomevitima: nome)
   RobotDeathEvent( name == $nomevitima )
then 
   retract($vitima);
   System.out.println("Uno menos");
end


// Ao chocar com um muro, sair "rebotado" pelo angulo oposto
//   (tem prioridade 5 para evitar que outras acoes "normais" nos deixem estancados)  
rule "choque com muro"
when
   HitWallEvent($anguloRelativo: bearing)
then
   insert(new Accion(Accion.GIRAR_TANQUE_DER, (- $anguloRelativo), 5));
   insert(new Accion(Accion.AVANZAR, 100, 5));
end


// ao chocar con vitima, retroceder
//   (tem prioridade 5 para evitar que outras acoes "normais" nos deixem estancados)  
rule "choque com vitima"
when
   HitRobotEvent($nome: name, $anguloRelativo: bearing)
   vitima(nome == $nome)
then
   insert(new Accion(Accion.RETROCEDER, 100, 5));
end

// ao chocar com outro robot que nao seja a vitima 
//(ou se ela nao existe), sair "rebotado" no angulo oposto
//   (tem prioridade 5 para evitar que outras acoes "normais" nos deixem estancados)  
rule "choque com outro robot"
when
   HitRobotEvent($nome: name, $anguloRelativo: bearing)
   (or (not (exists vitima()))
       (vitima(nome != $nome)))
then
   insert(new Accion(Accion.GIRAR_TANQUE_DER, (- $anguloRelativo*1.50), 5));
   insert(new Accion(Accion.AVANZAR, 100, 5));
end

